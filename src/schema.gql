# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Blog {
  createdAt: DateTime!
  description: String!
  id: Int!
  title: String!
  updatedAt: DateTime!
  writer: User
}

type BlogBase {
  createdAt: DateTime!
  description: String!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type BlogPost {
  blog: BlogBase
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
  writer: User
}

input BlogPostsFilterInput {
  blogId: Int
  writerId: Int
}

enum BlogPostsSortingFieldsEnum {
  createdAt
  title
}

input BlogPostsSortingInput {
  field: BlogPostsSortingFieldsEnum!
  order: OrderEnum!
}

input BlogsFilterInput {
  writerId: Int
}

enum BlogsSortingFieldsEnum {
  createdAt
}

input BlogsSortingInput {
  field: BlogsSortingFieldsEnum!
  order: OrderEnum!
}

input CreateBlogInput {
  description: String!
  title: String!
}

input CreateBlogPostInput {
  blogId: Int!
  content: String!
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRoleEnum!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createBlog(input: CreateBlogInput!): Blog!
  createBlogPost(input: CreateBlogPostInput!): BlogPost!
  createUser(input: CreateUserInput!): User!
  removeBlog(id: Int!): Blog!
  removeBlogPost(id: Int!): BlogPost!
  removeUser: User!
  signIn(input: SignInInput!): SignInOutput!
  updateBlog(id: Int!, input: UpdateBlogInput!): Blog!
  updateBlogPost(id: Int!, input: UpdateBlogPostInput!): BlogPost!
  updateUser(input: UpdateUserInput!): User!
}

enum OrderEnum {
  asc
  desc
}

type PaginatedBlogOutput {
  count: Int!
  edges: [Blog!]
}

type PaginatedBlogPostOutput {
  count: Int!
  edges: [BlogPost!]
}

type PaginatedUserOutput {
  count: Int!
  edges: [User!]
}

type Query {
  blog(id: Int!): Blog!
  blogPost(id: Int!): BlogPost!
  blogPosts(filter: BlogPostsFilterInput, limit: Int! = 10, skip: Int! = 0, sorting: BlogPostsSortingInput): PaginatedBlogPostOutput!
  blogs(filter: BlogsFilterInput, limit: Int! = 10, skip: Int! = 0, sorting: BlogsSortingInput): PaginatedBlogOutput!
  user(id: Int!): User!
  users(limit: Int! = 10, skip: Int! = 0, sorting: UsersSortingInput): PaginatedUserOutput!
}

input SignInInput {
  email: String!
  password: String!
}

type SignInOutput {
  accessToken: String!
}

input UpdateBlogInput {
  description: String
  title: String
}

input UpdateBlogPostInput {
  blogId: Int
  content: String
  title: String
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  fullName: String!
  id: Int!
  lastName: String!
  role: UserRoleEnum!
  updatedAt: DateTime!
}

enum UserRoleEnum {
  moderator
  writer
}

enum UsersSortingFieldsEnum {
  createdAt
  email
}

input UsersSortingInput {
  field: UsersSortingFieldsEnum!
  order: OrderEnum!
}